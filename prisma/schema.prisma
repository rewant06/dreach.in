generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum UserRole {
  PATIENT
  DOCTOR
  SUPERADMIN
  ADMIN
  LAB
  HOSPITAL
  NURSING
  DOCTORSASSISTANT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  INITIATED
  PAID
  REFUNDED
  FAILED
  CONFIRMED
  CANCELLED
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}


enum Service {
  HomeCare
  VideoConsultation
  OndeskAppointment
  IntegratedCare
  CollaborativeCare
  LabTest
}



enum PaymentMethod {
  UPI
  CARD
  NET_BANKING
  CASH
  WALLET
}



enum PermissionType {
  ACCEPT
  REJECT
  PENDING
  VIEW
  EDIT
  DELETE
  CREATE
  UPDATE
}

enum ProviderType {
  DOCTOR
  HOSPITAL
  LAB
  NURSING
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}







//
// Core Models
//
model User {
  id                String   @id @default(cuid()) // Unique identifier for the user
  username          String?  @unique // Optional unique username
  name              String // Full name of the user
  email             String   @unique // Unique email address for the user
  password          String // Encrypted password for authentication
  phone             String // Contact phone number
  role              UserRole // Enum to define the user's role (e.g., PATIENT, DOCTOR, ADMIN)
  gender            Gender? // Optional gender field (e.g., MALE, FEMALE, OTHER)
  dateOfBirth       DateTime? // Optional date of birth
  bloodGroup        BloodGroup? // Optional blood group (e.g., A_POSITIVE, O_NEGATIVE)
  address           Address? // Optional relation to the Address model
  isActive          Boolean  @default(true) // Indicates if the user account is active
  profilePic        String? // Optional profile picture URL
  createdAt         DateTime @default(now()) // Timestamp for when the user was created
  updatedAt         DateTime @updatedAt // Timestamp for when the user was last updated

  // Relations to other models
  patient           Patient? // Relation to the Patient model (if the user is a patient)
  doctor            Doctor? // Relation to the Doctor model (if the user is a doctor)
  superAdmin        SuperAdmin? // Relation to the SuperAdmin model (if the user is a super admin)
  admin             Admin? // Relation to the Admin model (if the user is an admin)
  lab               Lab? // Relation to the Lab model (if the user is a lab provider)
  hospital          Hospital? // Relation to the Hospital model (if the user is a hospital provider)
  nursing           Nursing? // Relation to the Nursing model (if the user is a nursing provider)
  doctorsAssistant  DoctorsAssistant? // Relation to the DoctorsAssistant model (if the user is an assistant)
  payments          Payment[] // Relation to Payment model for tracking user payments
  medicalRecords    MedicalRecord[] // Relation to MedicalRecord model for storing medical records
  appointments      Appointment[] // Relation to Appointment model for user appointments
  ratings           Rating[] // Relation to Rating model for user ratings
}

model Address {
  id        String @id @default(cuid())
  address   String
  city      String
  state     String
  country   String
  pincode   String
  userId    String @unique // Marked as unique to define a one-to-one relation
  user      User   @relation(fields: [userId], references: [id])
}

//
// Admin Models
//
model SuperAdmin {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  permissions       String[]
}

model Admin {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  permissions       String[]
  canManageProviders Boolean @default(true)
  canViewAllTransactions Boolean @default(true)
  canViewAllAppointments Boolean @default(true)
}

//
// Service User Models
//

model ServiceProvider {
  id                String   @id @default(cuid()) // Unique identifier for the service provider
  name              String   // Name of the service provider (e.g., Doctor, Hospital)
  providerType      ProviderType // Enum to define the type of provider (e.g., DOCTOR, HOSPITAL)
  fee               Float?
  experience        Int?
  description       String?
  service           Service[]
  status            Status?
  schedules         Schedule[]
  education         Education[]  
  workExperience    WorkExperience[]
  awards            Award[]
  clinicinfo       ClinicInfo[]
  labResults        LabResult[]
  therapyPlans      TherapyPlan[]
  documents         String?
  specialization    String
  hospitalId        String?


}

model Patient {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  address           String
  conditions        String[]
  allergies         Allergy[]
  bloodGroup        BloodGroup
  treatmentPlans    TherapyPlan[]
  
  prescriptions     Prescription[]
  labResults        LabResult[]
  
  
}

// Service Provider Models

model Doctor {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  prescriptions     Prescription[]
  assistants        DoctorsAssistant[]
  requests          Request[]
  
}

model DoctorsAssistant {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  assignedDoctorId  String
  doctor            Doctor   @relation(fields: [assignedDoctorId], references: [id])
  requestPermissions RequestPermission[]
}

model Lab {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  servicesOffered   String[]
}

model Hospital {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  servicesOffered   String[]
}

model Nursing {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  servicesOffered   String[]
}

//
// Medical Models
//
model Allergy {
  id                String   @id @default(cuid())
  allergen          String
  type              String
  severity          String
  reaction          String
  patientId         String
  patient           Patient  @relation(fields: [patientId], references: [id])
}

model Medication {
  id                String   @id @default(cuid())
  name              String
  dosage            String
  frequency         String
  duration          String
  status            String

  prescriptionId    String?
  prescription      Prescription?  @relation(fields: [prescriptionId], references: [id])
}

model LabResult {
  id                String   @id @default(cuid())
  testName          String
  testDate          DateTime
  result            String
  referenceRange    String
  status            String
  patientId         String
  patient           Patient  @relation(fields: [patientId], references: [id])
  serviceProvideId  String
  serviceProvider   ServiceProvider   @relation(fields: [serviceProvideId], references: [id])
}

model MedicalRecord {
  id                String   @id @default(cuid())
  diagnosis         String
  prescription      String
  notes             String?
  userId            String
  user              User     @relation(fields: [userId], references: [id])
}

model Prescription {
  id                String   @id @default(cuid())
  patientId         String
  doctorId          String
  medications       Medication[]
  notes             String?
  dateIssued        DateTime
  patient           Patient  @relation(fields: [patientId], references: [id])
  doctor            Doctor   @relation(fields: [doctorId], references: [id])
}

//
// Appointment and Related Models
//


model TherapyPlan {
  id                String   @id @default(cuid())
  planName          String
  date              DateTime
  type              String
  status            String
  details           String

  patientId         String
  patient           Patient  @relation(fields: [patientId], references: [id])
  serviceProvideId  String
  serviceProvider   ServiceProvider   @relation(fields: [serviceProvideId], references: [id])
}

//
// Payment and Transaction Models
//
model Payment {
  id                String   @id @default(cuid())
  transactionId     String   @unique
  amount            Float
  status            Status
  paymentMethod     PaymentMethod
  paymentDate       DateTime @default(now())
  refundDetails     String?
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  appointmentId     String?
  appointment       Appointment? @relation(fields: [appointmentId], references: [id])
  transaction       Transaction[]
}

model Transaction {
  id                String   @id @default(cuid())
  gatewayTransactionId String @unique
  amount            Float
  status            Status
  paymentMethod     PaymentMethod
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  refundDetails     String?
  paymentId         String   @unique
  payment           Payment  @relation(fields: [paymentId], references: [id])
}

//
// Feedback and Review Models
//
model Rating {
  id                String   @id @default(cuid()) // Unique identifier for the rating
  doctorId          String   // ID of the doctor being rated
  doctor            Doctor   @relation(fields: [doctorId], references: [id]) // Relation to the Doctor model
  userId            String   // ID of the user who gave the rating
  user              User     @relation(fields: [userId], references: [id]) // Relation to the User model
  score             Float    // Rating score (e.g., 1.0 to 5.0)
  comment           String?  // Optional comment or review text
  createdAt         DateTime @default(now()) // Timestamp for when the rating was created
  updatedAt         DateTime @updatedAt // Timestamp for when the rating was last updated
}

//
// Permission, Request, Access Models
//
model RequestPermission {
  id                String   @id @default(cuid())
  name              String
  description       String?
  accessType        PermissionType
  requests          Request[]
  doctorsAssistantId String?
  doctorsAssistant   DoctorsAssistant? @relation(fields: [doctorsAssistantId], references: [id])
}

model Request {
  id                String   @id @default(cuid())
  requestPermissions RequestPermission[]
  status            Status
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  doctorId          String?
  doctor            Doctor?  @relation(fields: [doctorId], references: [id])
}

// Appointment Schedule and Slot creating -------------------------------------

model Appointment {
  id                String   @id @default(cuid()) // Unique identifier for the appointment
  service           Service[] // Enum to define the type of service (e.g., HomeCare, VideoConsultation)
  status            Status // Enum to track the status of the appointment (e.g., PENDING, CONFIRMED)
  dateTime          DateTime // Date and time of the appointment
  bookedAt          DateTime @default(now()) // Timestamp for when the appointment was booked
  reason            String? // Optional reason for the appointment

  // Booking for Others
  isForOthers       Boolean  @default(false) // Indicates if the appointment is for someone else
  othersAppointment OthersAppointment? // Relation to the OthersAppointment model

  // Slot and Location
 
  appointmentSlot   Slot
  currentLocation   CurrentLocation?

  // Relations
  userId            String // ID of the user who booked the appointment
  user              User   @relation(fields: [userId], references: [id]) // Relation to the User model
  payments          Payment[] // Relation to Payment model for tracking payments
  createdAt         DateTime @default(now()) // Timestamp for when the appointment was created
  updatedAt         DateTime @updatedAt // Timestamp for when the appointment was last updated
}

model OthersAppointment {
  id                String   @id @default(cuid()) // Unique identifier for the others' appointment
  name              String   // Name of the person for whom the appointment is booked
  contact           String   // Contact number of the person
  email             String?  // Email of the person (optional)
  relationship      String   // Relationship with the person (e.g., Friend, Family, Colleague)
  reason            String?  // Reason for the appointment (optional)

  // Relations
  appointmentId     String  @unique // ID of the associated appointment
  appointment       Appointment @relation(fields: [appointmentId], references: [id]) // Relation to the Appointment model

  createdAt         DateTime @default(now()) // Timestamp for when the record was created
  updatedAt         DateTime @updatedAt // Timestamp for when the record was last updated
}

model Schedule {
  id                String   @id @default(cuid()) // Unique identifier for the schedule
  date              DateTime? // Specific date for the schedule (used for temporary schedules)
  dayOfWeek         WeekDay?  // Day of the week (e.g., "Monday", "Tuesday") for recurring schedules
  isRecurring       Boolean  @default(false) // Indicates if the schedule is recurring
  recurrenceType    RecurrenceType?  // Type of recurrence (e.g., "Daily", "Weekly")
  startTime         DateTime // Start time of the schedule
  endTime           DateTime // End time of the schedule
  slotDuration      Int      // Duration of each slot in minutes (e.g., 15 for 15-minute slots)
  location          String   // Location of the schedule (e.g., Clinic, Hospital, Online)
  isAvailable       Boolean  @default(true) // Indicates if the schedule is available for booking
  serviceType       Service  // Enum to define the type of service (e.g., HomeCare, VideoConsultation)

  // Relations
  serviceProviderId String // ID of the service provider (e.g., doctor, hospital)
  serviceProviders   ServiceProvider @relation(fields: [serviceProviderId], references: [id]) // Relation to the ServiceProvider model
  slots             Slot[] // Relation to Slot model for individual appointment slots

  createdAt         DateTime @default(now()) // Timestamp for when the schedule was created
  updatedAt         DateTime @updatedAt // Timestamp for when the schedule was last updated
}

model Slot {
  id                String   @id @default(cuid()) // Unique identifier for the slot
  startTime         DateTime // Start time of the slot
  endTime           DateTime // End time of the slot
  isBooked          Boolean  @default(false) // Indicates if the slot is booked
  scheduleId        String   // ID of the parent schedule
  schedule          Schedule @relation(fields: [scheduleId], references: [id]) // Relation to the Schedule model
  appointmentId     String?  // ID of the booked appointment (if any)
  appointment       Appointment? @relation(fields: [appointmentId], references: [id]) // Relation to the Appointment model
  clinicInfo        ClinicInfo

  bookedAt         DateTime @default(now()) // Timestamp for when the slot was created
  updatedAt         DateTime @updatedAt // Timestamp for when the slot was last updated
}

model ClinicInfo {
  id          String   @id @default(cuid()) // Unique identifier for the clinic
  clinicName  String   // Name of the clinic
  address     String   // Address of the clinic
  contact     String   // Contact information for the clinic
  images      String[] // Array of image URLs for the clinic

  // Relations
  slotId      String?  // Optional relation to a slot
  slot        Slot?    @relation(fields: [slotId], references: [id]) // Relation to the Slot model

  serviceProviderId String // ID of the service provider (e.g., doctor, hospital)
  serviceProviders   ServiceProvider @relation(fields: [serviceProviderId], references: [id]) // Relation to the ServiceProvider model
  createdAt   DateTime @default(now()) // Timestamp for when the clinic was created
  updatedAt   DateTime @updatedAt // Timestamp for when the clinic was last updated
}

model Education {
  id          String   @id @default(cuid()) // Unique identifier for the education record
  university  String   // Name of the university
  degree      String   // Degree obtained
  duration    String   // Duration of the education (e.g., "2015-2019")
  serviceProviderId String // ID of the service provider (e.g., doctor, hospital)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id]) // Relation to the ServiceProvider model
}

model WorkExperience {
  id          String   @id @default(cuid()) // Unique identifier for the work experience record
  clinic      String   // Name of the clinic or organization
  duration    String   // Duration of the work experience (e.g., "2 years")
  serviceProviderId String // ID of the service provider (e.g., doctor, hospital)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id]) // Relation to the ServiceProvider model
}

model Award {
  id          String   @id @default(cuid()) // Unique identifier for the award
  date        String   // Date of the award
  title       String   // Title of the award
  description String   // Description of the award
  serviceProviderId String // ID of the service provider (e.g., doctor, hospital)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id]) // Relation to the ServiceProvider model
}

model CurrentLocation {
  id          String   @id @default(cuid()) // Unique identifier for the location
  lat         Float    // Latitude of the location
  long        Float    // Longitude of the location

  // Relations
  appointmentId String? @unique// Optional relation to an appointment
  appointment Appointment? @relation(fields: [appointmentId], references: [id]) // Relation to Appointment model
  
}

